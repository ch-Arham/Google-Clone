import Head from "next/head";
import React from "react";
import SearchHeader from "../components/SearchHeader";
import Response from "../Response";
// import SearchResultsDisplayed from "../components/SearchResultsDisplayed";
import PaginationButtons from "../components/PaginationButtons";

const search = ({ results }) => {
  return (
    <>
      <Head>
        <title>
          {results.queries.request[0].searchTerms} - Google Clone Search
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SearchHeader />

      <div className='mx-auto w-full px-3 sm:pl-[5%] md:pl-[14%] lg:pl-52"'>
        <p className="text-gray-600 text-md mb-5 mt-3">
          About {results.searchInformation?.formattedTotalResults} results (
          {results.searchInformation?.formattedSearchTime} seconds)
        </p>

        {results.items?.map((result, index) => (
          <div key={index} className="max-w-xl mb-8">
            <div className="group">
              <a href={result.link} className="text-sml line-clamp-1">
                {result.formattedUrl}
              </a>
              <a href={result.link}>
                <h2 className="truncate text-xl text-blue-800 font-medium group-hover:underline">
                  {result.title}
                </h2>
              </a>
            </div>
            <p className="font-normal line-clamp-2">{result.snippet}</p>
          </div>
        ))}
        {console.log("END of Search Result")}
        {/* <PaginationButtons /> */}
      </div>
    </>
  );
};

export default search;

export async function getServerSideProps(context) {
  const useDummyData = true;

  // Pagination Starting Point
  const startIndex = context.query.start || "0";

  const data = useDummyData
    ? Response
    : await fetch(
        `https://www.googleapis.com/customsearch/v1?key=${process.env.API_KEY}&cx=${process.env.CONTEXT_KEY}&q=${context.query.searchedTerm}&start=${startIndex}`
      ).then((res) => res.json());

  // After the server has rendered --- pass the results to the client
  return {
    props: {
      results: data,
    },
  };
}
